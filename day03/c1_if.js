// c1_if.js
// 제어문
// 조건문 if
// 조건문이란, 조건식의 결과에 따라 코드를 건너뛰거나
// 해당 코드를 실행하는 동작을 하는,
// 분기점을 만드는 문법을 의미한다.
// if(조건식){}
// 조건식: 식의 결과로 true 혹은 false가 반환되는 계산식을 의미한다.
// 조건식이 참일 경우 해당 코드 블록{}에 진입하여
// 그 코드를 실행한다.
// 조건식이 거짓이라면 해당 코드 블록{}을 무시하고
// 건너뛴다.
let num = 30;
let num2 = 10;

// num에 담긴 값이 num2에 담긴 값보다 크다면
if(num > num2) {// 아래 코드를 실행하라
    console.log("num의 값이 num2의 값보다 큽니다.");
}
// num에 담긴 값이 num2에 담긴 값보다 크지 않다면
// if(!(num > num2)) {// 아래 코드를 실행하라
//     console.log("num의 값이 num2의 값보다 작습니다.");
// }

// if-else 구문
// if문의 조건식이 만족하는 경우,
// if문의 코드 블록{}을 실행했다.
// 만약 해당 조건식이 거짓이라면,
// else문의 코드 블록{}을 대신 실행한다.
// - if-else문은 두 코드 블록{} 중 하나는 반드시 실행되는 문법이다.
// - else문은 if문 없이 사용될 수 없다.
else {
    console.log("num의 값이 num2의 값보다 작거나 같습니다.");
}

// 다중 조건문
// if-else if-else
// if문의 조건식을 여러 개 늘어놓아서
// 해당 조건식들을 순차적으로 검사하여
// 가장 먼저 참이 되는 코드 블록{}의 코드를 실행하는 문법이다.
// if(조1){} else if(조2){}else if(조3){}...else{}
let score = 95;

if(score > 90){
    console.log("90점 초과");
} else if(score >= 80){
    console.log("80점 이상");
} else {
    console.log("아무것도 아니야.");
}

// 조건문 중 스위치문
// 조건식이 숫자 값을 이용한 범위로 조건을 주거나 한다면
// 스위치문은 특정 변수에 담긴 값이
// 특정 값(상수)인 경우에 해당 코드 블록부터 실행을 시작한다.
// case 상수: 부분에서, 변수의 값이 상수와 그 값이 같다면
// 해당 코드블록부터 코드를 실행한다.
// case 뒤에 오는 값은 기본적으로 상수여야 하지만
// 변칙적으로 변수가 올 수는 있다.
// switch(변수){
//  case 상수: 참 실행
//  case 상수2: 참 실행
// }

let num3 = 31;

switch (num3) {
    case 31:
        console.log("해당 변수의 값은 31입니다.");
        break; // case 코드 블록만 실행한 후
        // 스위치문을 벗어나는 기타 제어문의 일종이다.
        // break 예약어는 switch문의 흘러내림을 막는 역할을 한다.
    default: // 위의 케이스 중 아무것도 일치하지 않는다면
        break;
}