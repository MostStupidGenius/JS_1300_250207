// c5_array.js
// 배열 Array
// 여러 개의 다양한 데이터타입의 값을 저장할 수 있는 데이터 구조
// - 저장하는 순서를 기억하기 때문에,
// 저장한 순서값(인덱스)으로 그 값에 접근할 수 있다.
// - 다양한 데이터 타입의 값을 저장할 수 있다.
// - 요소를 추가하거나 제거하면 남은 요소의 개수에 맞게
// 배열의 길이가 자동으로 조절된다.->동적 길이

// 배열의 생성
// 1. 대괄호[] 사용하기
// 대괄호에 여러 값을 나열하고 값과 값 사이에
// 반점,을 넣어서 여러 값을 하나의 배열에 요소로 넣을 수 있다.
let fruits = ["apple", "banana", "mango", "melon"];

// 2. new Array() 사용하기
// new Array() 소괄호() 안에 요소로 하고자 하는 값을
// 반점,으로 구분하여 여러개 전달하면 해당 요소들로 이루어진
// 배열을 반환한다.
let names = new Array("홍길동", "고길동", "짱구", "둘리");

// 배열의 요소에 접근하는 방법
// 요소에 접근할 때에는 저장했던 순서를 이용하여
// 접근할 수 있다.
// 순서값을 인덱스라고 부르며, 이 값은 0부터 시작한다.
// arr[index]
// arr이라는 배열의 index번째 요소를 접근한다는 의미이다.
// 접근: 그 값을 사용하거나 해당 저장공간의 값을 변경할 수 있음을
// 의미한다(변경-상수 제외)

// names 요소 중 2번째에 있는 요소 값을 가져와
console.log(names[2]); // 짱구

// 배열의 길이
// 배열이 담긴 변수 바로 뒤에 마침표.를 붙이고
// 그 뒤에 length를 적으면 해당 배열의 요소 개수를 반환한다.
// arr.length
// 이러한 속성에 접근하는 마침표.를 하위 접근 연산자라고도 부른다.
console.log(names.length); // 4

// 배열 요소의 추가/삭제
// 요소의 추가
// arr.push(값)
// 전달된 값을 배열의 마지막 요소로 추가한다.
names.push("코난");
console.log(names[names.length-1]); // 마지막 요소 접근

let cars = ["SM5", "람보르기니", "볼보 트럭", "카니발"];
// 요소의 제거
// arr.pop() -> 마지막 요소를 제거
console.log(cars); // 현재 요소 출력
cars.pop(); // 마지막 요소 제거
console.log(cars); // 요소 제거 후 현재 요소 출력

// 배열의 앞에서 요소 제거(0번째 요소 제거)
// arr.shift()
cars.shift(); // 0번째 요소인 "SM5" 제거
console.log(cars); // 남은 요소 출력





